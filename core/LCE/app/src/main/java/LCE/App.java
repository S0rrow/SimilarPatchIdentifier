/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LCE;

import java.util.ArrayList;
import java.util.List;

public class App {
    public static final String ANSI_RESET = "\u001B[0m";
    public static final String ANSI_BLACK = "\u001B[30m";
    public static final String ANSI_RED = "\u001B[31m";
    public static final String ANSI_GREEN = "\u001B[32m";
    public static final String ANSI_YELLOW = "\u001B[33m";
    public static final String ANSI_BLUE = "\u001B[34m";
    public static final String ANSI_PURPLE = "\u001B[35m";
    public static final String ANSI_CYAN = "\u001B[36m";
    public static final String ANSI_WHITE = "\u001B[37m";
    public static void main(String[] args) {
        System.out.println(ANSI_YELLOW + "==========================================================");
        System.out.println(ANSI_YELLOW + "[LCE] App Initiated");
        App main = new App();
        System.out.println(ANSI_YELLOW + "[debug] main.run()");
        main.run(args);
    }

    public void run(String[] args) {
        String spi_path = args[0];
        Extractor extractor = new Extractor(args);
        GitLoader gitLoader = new GitLoader();
        System.out.println(ANSI_BLUE + "[debug] > Extractor running...");
        extractor.run();
        System.out.println(ANSI_GREEN + "[debug] > extractor set");
        List<String> result = extractor.extract();
        System.out.println(ANSI_GREEN + "[debug] > extraction done");
        List<String[]> preprocessed = preprocess(result);
        System.out.println(ANSI_GREEN + "[debug] > preprocess success");
        gitLoader.set(spi_path+"/core/LCE/result", spi_path+"/core/LCE/candidates");
        System.out.println(ANSI_BLUE + "[debug] > cleaning result and candidate directory");
        gitLoader.purge();
        System.out.println(ANSI_GREEN + "[debug] > cleaning done");
        System.out.println(ANSI_BLUE+ "[debug] > copying gitignore file to result directory and candidate directory");
        gitLoader.copy(spi_path+"/core/LCE/gitignore/.gitignore", spi_path+"/core/LCE/result/.gitignore");
        gitLoader.copy(spi_path+"/core/LCE/gitignore/.gitignore", spi_path+"/core/LCE/candidates/.gitignore");
        System.out.println(ANSI_GREEN + "[debug] > gitignore file copied");
        System.out.println(ANSI_BLUE + "[debug] > Initiating gitLoader");
        int counter = 0;
        for (String[] line : preprocessed) {
            gitLoader.count(counter);
            gitLoader.config(line[4], line[0], line[1], line[2], line[3]);
            gitLoader.run();
            try {
                if(gitLoader.load()) {
                    System.out.println(ANSI_GREEN + "[debug] > gitLoader load success");
                } else {
                    System.out.println(ANSI_RED + "[debug] > gitLoader load failed");
                }
            } catch (Exception e) {
                System.out.println(ANSI_RED + "[error] > Exception :" + e.getMessage());
            }
            counter++;
        }
        System.out.println(ANSI_GREEN + "[debug] > gitLoader done");
        System.out.println(ANSI_YELLOW + "==========================================================");
        System.out.println(ANSI_YELLOW + "[debug] > App done" + ANSI_RESET);
    }

    private List<String[]> preprocess(List<String> result) {
        List<String[]> result_split = new ArrayList<>();
        try {
            for (String line : result) {
                // System.out.println("[debug] line : " + line);
                String[] line_split = line.split(",");
                String[] selection = new String[] { line_split[0], line_split[1], line_split[2], line_split[3], line_split[4] };
                result_split.add(selection);
            }
        } catch (Exception e) {
            System.out.println("[error] > " + e.getMessage());
        }
        return result_split;
    }
}
