/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package BuggyChangeCollector;

import org.apache.commons.cli.*;
import java.io.*;
import java.util.*;

public class App {
    // public String getGreeting() {
    //     return "Hello World!";
    // }

    private String hashID = new String();
    private boolean isDefects4j = false;
    
    private String bugInfoFile = new String();

    private String projectName = new String();
    private String projectLink = new String();
    // private String buggyCommit = new String();
    private String faultyPath = new String();
    private int faultyLineFix = 0;
    private int faultyLineBlame = 0;
    

    public static void main(String[] args) {
        App main = new App();
        main.run(args);
    }

    public void run(String[] args)
    {
        Properties bugProps = new Properties();

        String root = System.getProperty("user.dir");

        Project targetProject;

        parseArgs(args);

        String targetDir = String.format("%s/target/%s", root, hashID);
        String outputDir = String.format("%s/outputs", targetDir);

        File targetDirPath = new File(targetDir);
        File outputDirPath = new File(outputDir);

        if(!targetDirPath.mkdirs() || !outputDirPath.mkdirs())
        {
            System.err.println("mkdirs for target/output directory failed.");
            System.exit(-1);
        }

        targetProject = (isDefects4j)   ? (new Defects4JProject(this.projectName, outputDir))
                                        : (new GitHubProject(this.projectName, this.projectLink, outputDir, this.faultyPath, this.faultyLineBlame, this.faultyLineFix));

        targetProject.fetch();
        String[] FICs = targetProject.getFICs();
        String BFIC = FICs[0];
        String FIC = FICs[1];

        System.out.printf("BFIC : %s\n", BFIC);
        System.out.printf("FIC : %s\n", FIC);
    }

    public void parseArgs(String[] args)
    {
        Options options = new Options();
        Option[] option = new Option[5];
        String root = System.getProperty("user.dir");

        option[0] = Option.builder("d").longOpt("defects4j")
            .hasArg().argName("defects4jBug")
            .desc("Tells that Defects4J Bug is passed as an argument.").build();
        option[1] = Option.builder("i").longOpt("input")
            .hasArg().argName("directInput")
            .desc("Tells that direct input is given in one line, separated in comma.").build();
        option[2] = Option.builder("f").longOpt("file")
            .hasArg().argName("bugInfoFile")
            .desc("Tells that defect properties are directly given via .properties file.").build();
        option[3] = Option.builder("h").longOpt("hash")
            .required()
            .hasArg().argName("hashID")
            .desc("Tells that previously made byproducts will be used.").build();
        option[4] = Option.builder("?").longOpt("help")
            .desc("Prints out this help message.").build();

        for(int i = 0; i < option.length; i++)  options.addOption(option[i]);

        CommandLineParser parser = new DefaultParser();
        try
        {
            CommandLine line = parser.parse(options, args);

            if(line.hasOption("help"))
            {
                HelpFormatter formatter = new HelpFormatter();
                formatter.printHelp("BuggyChangeCollector", options);

                System.exit(0);
            }

            if(line.hasOption("hash")) this.hashID = line.getOptionValue("hash");
            if(line.hasOption("file"))
            {
                this.bugInfoFile = String.format("%s/%s", root, line.getOptionValue("file"));
                
                Properties bugProps = new Properties();
                bugProps.load(new FileInputStream(bugInfoFile));

                this.projectName        = bugProps.getProperty("projectName");
                this.projectLink        = bugProps.getProperty("projectLink");
                // this.buggyCommit        = bugProps.getProperty("buggyCommit");            
                this.faultyPath         = bugProps.getProperty("faultyPath");
                this.faultyLineBlame    = Integer.parseInt(bugProps.getProperty("faultyLineBlame"));
                this.faultyLineFix      = Integer.parseInt(bugProps.getProperty("faultyLineFix"));
            }
            if(line.hasOption("input"))
            {
                String[] bugInfo = line.getOptionValue("input").split(",");

                this.projectName        = bugInfo[0];
                this.projectLink        = bugInfo[1];
                // this.buggyCommit        = bugInfo[2];
                this.faultyPath         = bugInfo[2];
                this.faultyLineBlame    = Integer.parseInt(bugInfo[3]);
                this.faultyLineFix      = Integer.parseInt(bugInfo[4]);
            }
            if(line.hasOption("defects4j"))
            {
                this.projectName = line.getOptionValue("defects4j");
                this.isDefects4j = true;
            }
        }
        catch (ParseException | IOException ex)
        {
            System.err.println("Parsing failed. Reason: " + ex.getMessage());
            ex.printStackTrace();
        }
    }


    //    if(!isDefects4j && !bugInfoFile.equals(""))
    //    {
    //         try
    //         {
    //             bugProps.load(new FileInputStream(bugInfoFile));
    //         }
    //         catch (IOException e)
    //         {
    //             e.printStackTrace();
    //         }
    //         // System.out.printf("Direct input requested, as %s\n", bugInfoFile);

    //         projectName     = bugProps.getProperty("projectName");
    //         projectLink     = bugProps.getProperty("projectLink");
    //         faultyPath      = bugProps.getProperty("faultyPath");
    //         faultyLineFix   = bugProps.getProperty("faultyLineFix");
    //         faultyLineBlame = bugProps.getProperty("faultyLineBlame");
    //         buggyCommit     = bugProps.getProperty("buggyCommit");
    //    }
    //    else if(isDefects4j)
    //    {
    //         String[] bug_id = projectName.split("-");
    //         // read csv file.

    //         // projectName      =
    //         // projectLink      =
    //         // faultyPath       =
    //         // faultyLineFix    = 
    //         // faultyLineBlame  = 
    //         // buggyCommit      = 
    //    }


    //     // if(bugInfoFile.equals("")) // Direct input not given
    //     // {
    //     //     // String d4jCSVPath = String.format("");
    //     //     // File d4jCSV = new File("");


    //     // }
    //     // else
    //     // {
    //     // }



    //     // System.out.println(new App().getGreeting());
}
